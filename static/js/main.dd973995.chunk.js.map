{"version":3,"sources":["components/Table/Table.jsx","components/Buttons/Buttons.jsx","components/DataSearch/DataSearch.jsx","App.jsx","serviceWorker.js","index.js"],"names":["table","data","activeColumn","updateData","map","obj","index","key","id","Object","values","item","i","className","onClick","columnIndex","Buttons","child","columnSort","ch","dataSearch","columnName","type","onChange","e","value","target","toLowerCase","alert","filter","toString","includes","info","placeholder","App","state","name","date","count","sortType","month","января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря","copiedInfo","JSON","parse","stringify","dateFormat","searchedDate","replace","match","split","reverse","join","dateSort","direction","arrOfDates","sorted","slice","call","sort","a","b","config","this","setState","bind","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd973995.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Table.css';\r\n\r\nconst table = ({ data, activeColumn, updateData }) => {\r\n\tconst columnHandler = columnIndex => {\r\n\t\tactiveColumn === columnIndex\r\n\t\t\t? updateData({ activeColumn: -1 })\r\n\t\t\t: updateData({ activeColumn: columnIndex });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<table>\r\n\t\t\t<tbody>\r\n\t\t\t\t{data.map((obj, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<tr key={obj.id}>\r\n\t\t\t\t\t\t\t{Object.values(obj).map((item, i) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<td\r\n\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\tclassName={activeColumn === i ? 'selected' : ''}\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\tcolumnHandler(i);\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{item}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t);\r\n};\r\n\r\nexport default table;\r\n","import React from 'react';\r\nimport './Buttons.css';\r\n\r\nconst Buttons = ({ child, activeColumn, columnSort }) => {\r\n\treturn (\r\n\t\t<div className=\"buttons\">\r\n\t\t\t{child.map(ch => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<button key={ch} onClick={() => columnSort(activeColumn, ch)}>\r\n\t\t\t\t\t\t{ch}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport './DataSearch.css';\r\n\r\nconst dataSearch = ({ data, columnIndex, updateData }) => {\r\n\tlet columnName =\r\n\t\tcolumnIndex === 0\r\n\t\t\t? 'id'\r\n\t\t\t: columnIndex === 1\r\n\t\t\t? 'name'\r\n\t\t\t: columnIndex === 2\r\n\t\t\t? 'date'\r\n\t\t\t: 'count';\r\n\r\n\tconst search = e => {\r\n\t\tconst value = e.target.value.toLowerCase();\r\n\t\tif (columnIndex === -1) {\r\n\t\t\te.target.value = '';\r\n\t\t\talert('Выбери столбец:)');\r\n\t\t} else {\r\n\t\t\tconst filter = data.filter(obj => {\r\n\t\t\t\treturn obj[columnName]\r\n\t\t\t\t\t.toString()\r\n\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t.includes(value);\r\n\t\t\t});\r\n\t\t\tupdateData({\r\n\t\t\t\tinfo: filter\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\treturn <input type=\"text\" onChange={search} placeholder=\"Text smthg..\" />;\r\n};\r\n\r\nexport default dataSearch;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Table, Buttons, DataSearch } from './components/index.js';\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tinfo: [\r\n\t\t\t{ id: 1, name: 'Вася', date: '15.06.2018', count: 11 },\r\n\t\t\t{ id: 2, name: 'Петя', date: '23.11.2018', count: 23 },\r\n\t\t\t{ id: 3, name: 'Иван', date: '12 марта 2017', count: 3 },\r\n\t\t\t{ id: 4, name: 'Александр', date: '20/12/2010', count: 1 },\r\n\t\t\t{ id: 5, name: 'Евгений', date: '12.09.2018', count: 112 },\r\n\t\t\t{ id: 6, name: 'Мария', date: '1.08.2016', count: 122 },\r\n\t\t\t{ id: 7, name: 'Анастасия', date: '20.11.2018', count: 34 },\r\n\t\t\t{ id: 8, name: 'Степан', date: '12.11.2019', count: 10 }\r\n\t\t],\r\n\t\tactiveColumn: -1,\r\n\t\tsortType: ['Asc', 'Desc', 'Def']\r\n\t};\r\n\r\n\tmonth = {\r\n\t\tянваря: '01',\r\n\t\tфевраля: '02',\r\n\t\tмарта: '03',\r\n\t\tапреля: '04',\r\n\t\tмая: '05',\r\n\t\tиюня: '06',\r\n\t\tиюля: '07',\r\n\t\tавгуста: '08',\r\n\t\tсентября: '09',\r\n\t\tоктября: '10',\r\n\t\tноября: '11',\r\n\t\tдекабря: '12'\r\n\t};\r\n\r\n\tcopiedInfo = JSON.parse(JSON.stringify(this.state.info));\r\n\r\n\tupdateData(config) {\r\n\t\tthis.setState(config);\r\n\t}\r\n\r\n\tdateFormat = data => {\r\n\t\tconst copiedData = [...data].map(date => {\r\n\t\t\tdate = date.replace(/\\//g, '.');\r\n\t\t\tlet searchedDate = date.match('[а-яА-Я]+');\r\n\t\t\tif (searchedDate) {\r\n\t\t\t\tfor (let key in this.month) {\r\n\t\t\t\t\tif (searchedDate[0] === key) {\r\n\t\t\t\t\t\tdate = date.replace(/ ?[а-яА-Я]+ ?/, '.' + this.month[key] + '.');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdate = date\r\n\t\t\t\t.split('.')\r\n\t\t\t\t.reverse()\r\n\t\t\t\t.join('.');\r\n\t\t\treturn date;\r\n\t\t});\r\n\t\treturn copiedData;\r\n\t};\r\n\r\n\tdateSort = (data, direction) => {\r\n\t\tconst arrOfDates = this.dateFormat(data);\r\n\t\tif (arrOfDates[0] === arrOfDates[1]) return 0;\r\n\t\treturn arrOfDates[0] > arrOfDates[1] ? direction : direction * -1;\r\n\t};\r\n\r\n\tcolumnSort = (columnIndex, sortType) => {\r\n\t\tconst data = this.state.info;\r\n\t\tlet columnName =\r\n\t\t\tcolumnIndex === 0\r\n\t\t\t\t? 'id'\r\n\t\t\t\t: columnIndex === 1\r\n\t\t\t\t? 'name'\r\n\t\t\t\t: columnIndex === 2\r\n\t\t\t\t? 'date'\r\n\t\t\t\t: 'count';\r\n\t\tlet direction = sortType === 'Asc' ? 1 : sortType === 'Desc' ? -1 : '';\r\n\t\tif (direction === '') {\r\n\t\t\tcolumnName = 'id';\r\n\t\t\tdirection = 1;\r\n\t\t}\r\n\r\n\t\tif (columnIndex === -1 && (sortType === 'Asc' || sortType === 'Desc')) {\r\n\t\t\talert('Выбери столбец:)');\r\n\t\t} else {\r\n\t\t\tconst sorted = [].slice.call(data).sort((a, b) => {\r\n\t\t\t\tif (columnName === 'date') {\r\n\t\t\t\t\treturn this.dateSort([a[columnName], b[columnName]], direction);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (a[columnName] === b[columnName]) return 0;\r\n\t\t\t\t\treturn a[columnName] > b[columnName] ? direction : direction * -1;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.updateData({ info: sorted, activeColumn: -1 });\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { info, sortType, activeColumn } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Buttons\r\n\t\t\t\t\tchild={sortType}\r\n\t\t\t\t\tactiveColumn={activeColumn}\r\n\t\t\t\t\tcolumnSort={this.columnSort}\r\n\t\t\t\t/>\r\n\t\t\t\t<Table\r\n\t\t\t\t\tdata={info}\r\n\t\t\t\t\tactiveColumn={activeColumn}\r\n\t\t\t\t\tupdateData={this.updateData.bind(this)}\r\n\t\t\t\t/>\r\n\t\t\t\t<DataSearch\r\n\t\t\t\t\tdata={this.copiedInfo}\r\n\t\t\t\t\tcolumnIndex={activeColumn}\r\n\t\t\t\t\tupdateData={this.updateData.bind(this)}\r\n\t\t\t\t/>\r\n\t\t\t\t<span>\r\n\t\t\t\t\tAsc - ascension <br />\r\n\t\t\t\t\tDesc - descension <br />\r\n\t\t\t\t\tDef - default\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}